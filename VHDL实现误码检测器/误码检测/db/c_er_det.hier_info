|c_er_det
clk_in => pull1:pull.inclk0
reset_n => dis_seg:disp_seg.rst
reset_n => err_sta:error_statistic.rst
reset_n => syn:syn_m.rst
reset_n => local_m_seq:local_m.rst
reset_n => m_seq:m_sequencer.rst
m_out <= m_seq:m_sequencer.m_se
syn_clk <= pull1:pull.c1
scan[0] <= dis_seg:disp_seg.scan[0]
scan[1] <= dis_seg:disp_seg.scan[1]
scan[2] <= dis_seg:disp_seg.scan[2]
seg[0] <= dis_seg:disp_seg.seg[0]
seg[1] <= dis_seg:disp_seg.seg[1]
seg[2] <= dis_seg:disp_seg.seg[2]
seg[3] <= dis_seg:disp_seg.seg[3]
seg[4] <= dis_seg:disp_seg.seg[4]
seg[5] <= dis_seg:disp_seg.seg[5]
seg[6] <= dis_seg:disp_seg.seg[6]
seg[7] <= dis_seg:disp_seg.seg[7]
m_cnt[0] <= m_seq:m_sequencer.cnt_m[0]
m_cnt[1] <= m_seq:m_sequencer.cnt_m[1]
m_cnt[2] <= m_seq:m_sequencer.cnt_m[2]
m_cnt[3] <= m_seq:m_sequencer.cnt_m[3]
m_cnt[4] <= m_seq:m_sequencer.cnt_m[4]
m_cnt[5] <= m_seq:m_sequencer.cnt_m[5]
m_cnt[6] <= m_seq:m_sequencer.cnt_m[6]
m_cnt[7] <= m_seq:m_sequencer.cnt_m[7]
err_cnt_out[0] <= err_sta:error_statistic.err_cnt[0]
err_cnt_out[1] <= err_sta:error_statistic.err_cnt[1]
err_cnt_out[2] <= err_sta:error_statistic.err_cnt[2]
err_cnt_out[3] <= err_sta:error_statistic.err_cnt[3]
err_cnt_out[4] <= err_sta:error_statistic.err_cnt[4]
err_cnt_out[5] <= err_sta:error_statistic.err_cnt[5]
err_cnt_out[6] <= err_sta:error_statistic.err_cnt[6]
err_cnt_out[7] <= err_sta:error_statistic.err_cnt[7]


|c_er_det|pull1:pull
inclk0 => altpll:altpll_component.inclk[0]
c0 <= altpll:altpll_component.clk[0]
c1 <= altpll:altpll_component.clk[1]
c2 <= altpll:altpll_component.clk[2]


|c_er_det|pull1:pull|altpll:altpll_component
inclk[0] => cycloneii_pll:pll.INCLK[0]
inclk[1] => ~NO_FANOUT~
fbin => ~NO_FANOUT~
pllena => ~NO_FANOUT~
clkswitch => ~NO_FANOUT~
areset => ~NO_FANOUT~
pfdena => ~NO_FANOUT~
clkena[0] => ~NO_FANOUT~
clkena[1] => ~NO_FANOUT~
clkena[2] => ~NO_FANOUT~
clkena[3] => ~NO_FANOUT~
clkena[4] => ~NO_FANOUT~
clkena[5] => ~NO_FANOUT~
extclkena[0] => ~NO_FANOUT~
extclkena[1] => ~NO_FANOUT~
extclkena[2] => ~NO_FANOUT~
extclkena[3] => ~NO_FANOUT~
scanclk => ~NO_FANOUT~
scanclkena => ~NO_FANOUT~
scanaclr => ~NO_FANOUT~
scanread => ~NO_FANOUT~
scanwrite => ~NO_FANOUT~
scandata => ~NO_FANOUT~
phasecounterselect[0] => ~NO_FANOUT~
phasecounterselect[1] => ~NO_FANOUT~
phasecounterselect[2] => ~NO_FANOUT~
phasecounterselect[3] => ~NO_FANOUT~
phaseupdown => ~NO_FANOUT~
phasestep => ~NO_FANOUT~
configupdate => ~NO_FANOUT~
fbmimicbidir <= <GND>
clk[0] <= clk[0]~2.DB_MAX_OUTPUT_PORT_TYPE
clk[1] <= clk[1]~1.DB_MAX_OUTPUT_PORT_TYPE
clk[2] <= clk[2]~0.DB_MAX_OUTPUT_PORT_TYPE
clk[3] <= <GND>
clk[4] <= <GND>
clk[5] <= <GND>
extclk[0] <= <GND>
extclk[1] <= <GND>
extclk[2] <= <GND>
extclk[3] <= <GND>
clkbad[0] <= <GND>
clkbad[1] <= <GND>
enable1 <= <GND>
enable0 <= <GND>
activeclock <= <GND>
clkloss <= <GND>
locked <= <GND>
scandataout <= <GND>
scandone <= <GND>
sclkout0 <= <GND>
sclkout1 <= sclkout1~0.DB_MAX_OUTPUT_PORT_TYPE
phasedone <= <GND>
vcooverrange <= <GND>
vcounderrange <= <GND>
fbout <= <GND>


|c_er_det|m_seq:m_sequencer
clk => temp[7].CLK
clk => temp[6].CLK
clk => temp[5].CLK
clk => temp[4].CLK
clk => temp[3].CLK
clk => temp[2].CLK
clk => temp[1].CLK
clk => temp[0].CLK
clk => cnt[7].CLK
clk => cnt[6].CLK
clk => cnt[5].CLK
clk => cnt[4].CLK
clk => cnt[3].CLK
clk => cnt[2].CLK
clk => cnt[1].CLK
clk => cnt[0].CLK
clk => m_se~reg0.CLK
clk => cnt_m[7]~reg0.CLK
clk => cnt_m[6]~reg0.CLK
clk => cnt_m[5]~reg0.CLK
clk => cnt_m[4]~reg0.CLK
clk => cnt_m[3]~reg0.CLK
clk => cnt_m[2]~reg0.CLK
clk => cnt_m[1]~reg0.CLK
clk => cnt_m[0]~reg0.CLK
rst => temp[7].ACLR
rst => temp[6].ACLR
rst => temp[5].ACLR
rst => temp[4].ACLR
rst => temp[3].ACLR
rst => temp[2].ACLR
rst => temp[1].ACLR
rst => temp[0].PRESET
rst => cnt[7].ACLR
rst => cnt[6].ACLR
rst => cnt[5].ACLR
rst => cnt[4].ACLR
rst => cnt[3].ACLR
rst => cnt[2].ACLR
rst => cnt[1].ACLR
rst => cnt[0].PRESET
rst => cnt_m[0]~reg0.ENA
rst => m_se~reg0.ENA
rst => cnt_m[7]~reg0.ENA
rst => cnt_m[6]~reg0.ENA
rst => cnt_m[5]~reg0.ENA
rst => cnt_m[4]~reg0.ENA
rst => cnt_m[3]~reg0.ENA
rst => cnt_m[2]~reg0.ENA
rst => cnt_m[1]~reg0.ENA
m_se <= m_se~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt_m[0] <= cnt_m[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt_m[1] <= cnt_m[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt_m[2] <= cnt_m[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt_m[3] <= cnt_m[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt_m[4] <= cnt_m[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt_m[5] <= cnt_m[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt_m[6] <= cnt_m[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
cnt_m[7] <= cnt_m[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|c_er_det|interface:cha_interface
clk => sim_channel:sim_cha.clk
m_i => sim_channel:sim_cha.m_i
cnt_m[0] => sim_channel:sim_cha.cnt_m[0]
cnt_m[1] => sim_channel:sim_cha.cnt_m[1]
cnt_m[2] => sim_channel:sim_cha.cnt_m[2]
cnt_m[3] => sim_channel:sim_cha.cnt_m[3]
cnt_m[4] => sim_channel:sim_cha.cnt_m[4]
cnt_m[5] => sim_channel:sim_cha.cnt_m[5]
cnt_m[6] => sim_channel:sim_cha.cnt_m[6]
cnt_m[7] => sim_channel:sim_cha.cnt_m[7]
m_o <= sim_channel:sim_cha.m_o


|c_er_det|interface:cha_interface|sim_channel:sim_cha
clk => m_o~reg0.CLK
m_i => Selector0.IN3
m_i => Selector0.IN0
cnt_m[0] => Equal0.IN27
cnt_m[0] => Equal1.IN26
cnt_m[1] => Equal0.IN0
cnt_m[1] => Equal1.IN0
cnt_m[2] => Equal0.IN1
cnt_m[2] => Equal1.IN27
cnt_m[3] => Equal0.IN28
cnt_m[3] => Equal1.IN1
cnt_m[4] => Equal0.IN2
cnt_m[4] => Equal1.IN28
cnt_m[5] => Equal0.IN29
cnt_m[5] => Equal1.IN29
cnt_m[6] => Equal0.IN30
cnt_m[6] => Equal1.IN30
cnt_m[7] => Equal0.IN31
cnt_m[7] => Equal1.IN31
cnt_m[8] => Equal0.IN3
cnt_m[8] => Equal1.IN2
cnt_m[9] => Equal0.IN4
cnt_m[9] => Equal1.IN3
cnt_m[10] => Equal0.IN5
cnt_m[10] => Equal1.IN4
cnt_m[11] => Equal0.IN6
cnt_m[11] => Equal1.IN5
cnt_m[12] => Equal0.IN7
cnt_m[12] => Equal1.IN6
cnt_m[13] => Equal0.IN8
cnt_m[13] => Equal1.IN7
cnt_m[14] => Equal0.IN9
cnt_m[14] => Equal1.IN8
cnt_m[15] => Equal0.IN10
cnt_m[15] => Equal1.IN9
cnt_m[16] => Equal0.IN11
cnt_m[16] => Equal1.IN10
cnt_m[17] => Equal0.IN12
cnt_m[17] => Equal1.IN11
cnt_m[18] => Equal0.IN13
cnt_m[18] => Equal1.IN12
cnt_m[19] => Equal0.IN14
cnt_m[19] => Equal1.IN13
cnt_m[20] => Equal0.IN15
cnt_m[20] => Equal1.IN14
cnt_m[21] => Equal0.IN16
cnt_m[21] => Equal1.IN15
cnt_m[22] => Equal0.IN17
cnt_m[22] => Equal1.IN16
cnt_m[23] => Equal0.IN18
cnt_m[23] => Equal1.IN17
cnt_m[24] => Equal0.IN19
cnt_m[24] => Equal1.IN18
cnt_m[25] => Equal0.IN20
cnt_m[25] => Equal1.IN19
cnt_m[26] => Equal0.IN21
cnt_m[26] => Equal1.IN20
cnt_m[27] => Equal0.IN22
cnt_m[27] => Equal1.IN21
cnt_m[28] => Equal0.IN23
cnt_m[28] => Equal1.IN22
cnt_m[29] => Equal0.IN24
cnt_m[29] => Equal1.IN23
cnt_m[30] => Equal0.IN25
cnt_m[30] => Equal1.IN24
cnt_m[31] => Equal0.IN26
cnt_m[31] => Equal1.IN25
m_o <= m_o~reg0.DB_MAX_OUTPUT_PORT_TYPE


|c_er_det|local_m_seq:local_m
clk => temp[7].CLK
clk => temp[6].CLK
clk => temp[5].CLK
clk => temp[4].CLK
clk => temp[3].CLK
clk => temp[2].CLK
clk => temp[1].CLK
clk => temp[0].CLK
clk => m_loc~reg0.CLK
rst => temp[7].ACLR
rst => temp[6].ACLR
rst => temp[5].ACLR
rst => temp[4].ACLR
rst => temp[3].ACLR
rst => temp[2].ACLR
rst => temp[1].ACLR
rst => temp[0].PRESET
rst => m_loc~reg0.ENA
en => temp~10.OUTPUTSELECT
en => temp~9.OUTPUTSELECT
en => temp~8.OUTPUTSELECT
en => temp~7.OUTPUTSELECT
en => temp~6.OUTPUTSELECT
en => temp~5.OUTPUTSELECT
en => temp~4.OUTPUTSELECT
en => temp~3.OUTPUTSELECT
m_loc <= m_loc~reg0.DB_MAX_OUTPUT_PORT_TYPE


|c_er_det|syn:syn_m
clk => en~reg0.CLK
clk => cnt[2].CLK
clk => cnt[1].CLK
clk => cnt[0].CLK
clk => n[2].CLK
clk => n[1].CLK
clk => n[0].CLK
clk => start~reg0.CLK
rst => en~reg0.PRESET
rst => cnt[2].ACLR
rst => cnt[1].ACLR
rst => cnt[0].ACLR
rst => n[2].ACLR
rst => n[1].ACLR
rst => n[0].ACLR
rst => start~reg0.ENA
m_1 => process_0~0.IN0
m_loc => process_0~0.IN1
en <= en~reg0.DB_MAX_OUTPUT_PORT_TYPE
start <= start~reg0.DB_MAX_OUTPUT_PORT_TYPE


|c_er_det|err_sta:error_statistic
clk => m[7].CLK
clk => m[6].CLK
clk => m[5].CLK
clk => m[4].CLK
clk => m[3].CLK
clk => m[2].CLK
clk => m[1].CLK
clk => m[0].CLK
clk => cnt[7].CLK
clk => cnt[6].CLK
clk => cnt[5].CLK
clk => cnt[4].CLK
clk => cnt[3].CLK
clk => cnt[2].CLK
clk => cnt[1].CLK
clk => cnt[0].CLK
clk => err_cnt[7]~reg0.CLK
clk => err_cnt[6]~reg0.CLK
clk => err_cnt[5]~reg0.CLK
clk => err_cnt[4]~reg0.CLK
clk => err_cnt[3]~reg0.CLK
clk => err_cnt[2]~reg0.CLK
clk => err_cnt[1]~reg0.CLK
clk => err_cnt[0]~reg0.CLK
rst => m[7].ACLR
rst => m[6].ACLR
rst => m[5].ACLR
rst => m[4].ACLR
rst => m[3].ACLR
rst => m[2].ACLR
rst => m[1].ACLR
rst => m[0].ACLR
rst => cnt[7].ACLR
rst => cnt[6].ACLR
rst => cnt[5].ACLR
rst => cnt[4].ACLR
rst => cnt[3].ACLR
rst => cnt[2].ACLR
rst => cnt[1].ACLR
rst => cnt[0].PRESET
rst => err_cnt[0]~reg0.ENA
rst => err_cnt[7]~reg0.ENA
rst => err_cnt[6]~reg0.ENA
rst => err_cnt[5]~reg0.ENA
rst => err_cnt[4]~reg0.ENA
rst => err_cnt[3]~reg0.ENA
rst => err_cnt[2]~reg0.ENA
rst => err_cnt[1]~reg0.ENA
m_1 => process_0~0.IN0
m_loc => process_0~0.IN1
start => err_cnt~15.OUTPUTSELECT
start => err_cnt~14.OUTPUTSELECT
start => err_cnt~13.OUTPUTSELECT
start => err_cnt~12.OUTPUTSELECT
start => err_cnt~11.OUTPUTSELECT
start => err_cnt~10.OUTPUTSELECT
start => err_cnt~9.OUTPUTSELECT
start => err_cnt~8.OUTPUTSELECT
start => cnt~15.OUTPUTSELECT
start => cnt~14.OUTPUTSELECT
start => cnt~13.OUTPUTSELECT
start => cnt~12.OUTPUTSELECT
start => cnt~11.OUTPUTSELECT
start => cnt~10.OUTPUTSELECT
start => cnt~9.OUTPUTSELECT
start => cnt~8.OUTPUTSELECT
start => m~23.OUTPUTSELECT
start => m~22.OUTPUTSELECT
start => m~21.OUTPUTSELECT
start => m~20.OUTPUTSELECT
start => m~19.OUTPUTSELECT
start => m~18.OUTPUTSELECT
start => m~17.OUTPUTSELECT
start => m~16.OUTPUTSELECT
err_cnt[0] <= err_cnt[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
err_cnt[1] <= err_cnt[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
err_cnt[2] <= err_cnt[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
err_cnt[3] <= err_cnt[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
err_cnt[4] <= err_cnt[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
err_cnt[5] <= err_cnt[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
err_cnt[6] <= err_cnt[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
err_cnt[7] <= err_cnt[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|c_er_det|dis_seg:disp_seg
clk => m[14].CLK
clk => m[13].CLK
clk => m[12].CLK
clk => m[11].CLK
clk => m[10].CLK
clk => m[9].CLK
clk => m[8].CLK
clk => m[7].CLK
clk => m[6].CLK
clk => m[5].CLK
clk => m[4].CLK
clk => m[3].CLK
clk => m[2].CLK
clk => m[1].CLK
clk => m[0].CLK
clk => clk_1k.CLK
clk => d3[3].CLK
clk => d3[2].CLK
clk => d3[1].CLK
clk => d3[0].CLK
clk => d2[3].CLK
clk => d2[2].CLK
clk => d2[1].CLK
clk => d2[0].CLK
clk => d1[3].CLK
clk => d1[2].CLK
clk => d1[1].CLK
clk => d1[0].CLK
clk => err[31].CLK
clk => err[30].CLK
clk => err[29].CLK
clk => err[28].CLK
clk => err[27].CLK
clk => err[26].CLK
clk => err[25].CLK
clk => err[24].CLK
clk => err[23].CLK
clk => err[22].CLK
clk => err[21].CLK
clk => err[20].CLK
clk => err[19].CLK
clk => err[18].CLK
clk => err[17].CLK
clk => err[16].CLK
clk => err[15].CLK
clk => err[14].CLK
clk => err[13].CLK
clk => err[12].CLK
clk => err[11].CLK
clk => err[10].CLK
clk => err[9].CLK
clk => err[8].CLK
clk => err[7].CLK
clk => err[6].CLK
clk => err[5].CLK
clk => err[4].CLK
clk => err[3].CLK
clk => err[2].CLK
clk => err[1].CLK
clk => scan[2]~reg0.CLK
clk => scan[1]~reg0.CLK
clk => scan[0]~reg0.CLK
clk => data[3].CLK
clk => data[2].CLK
clk => data[1].CLK
clk => data[0].CLK
rst => err[0].LATCH_ENABLE
rst => d3[3].ACLR
rst => d3[2].ACLR
rst => d3[1].ACLR
rst => d3[0].ACLR
rst => d2[3].ACLR
rst => d2[2].ACLR
rst => d2[1].ACLR
rst => d2[0].ACLR
rst => d1[3].ACLR
rst => d1[2].ACLR
rst => d1[1].ACLR
rst => d1[0].ACLR
rst => err[31].ACLR
rst => err[30].ACLR
rst => err[29].ACLR
rst => err[28].ACLR
rst => err[27].ACLR
rst => err[26].ACLR
rst => err[25].ACLR
rst => err[24].ACLR
rst => err[23].ACLR
rst => err[22].ACLR
rst => err[21].ACLR
rst => err[20].ACLR
rst => err[19].ACLR
rst => err[18].ACLR
rst => err[17].ACLR
rst => err[16].ACLR
rst => err[15].ACLR
rst => err[14].ACLR
rst => err[13].ACLR
rst => err[12].ACLR
rst => err[11].ACLR
rst => err[10].ACLR
rst => err[9].ACLR
rst => err[8].ACLR
rst => err[7].ALOAD
rst => err[6].ALOAD
rst => err[5].ALOAD
rst => err[4].ALOAD
rst => err[3].ALOAD
rst => err[2].ALOAD
rst => err[1].ALOAD
err_cnt[0] => err[0].DATAIN
err_cnt[1] => err[1].ADATA
err_cnt[2] => err[2].ADATA
err_cnt[3] => err[3].ADATA
err_cnt[4] => err[4].ADATA
err_cnt[5] => err[5].ADATA
err_cnt[6] => err[6].ADATA
err_cnt[7] => err[7].ADATA
scan[0] <= scan[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
scan[1] <= scan[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
scan[2] <= scan[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg[0] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
seg[1] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
seg[2] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
seg[3] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
seg[4] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
seg[5] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
seg[6] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
seg[7] <= <VCC>


